!function(){"use strict";var t={997:function(t,e,i){var n=i(537),o=i.n(n),s=i(645),a=i.n(s)()(o());a.push([t.id,"#videoplayer-sticky {        \n    height: 300px;\n    position: fixed;\n    bottom: 0;\n    right: 5px;\n    width: 500px;\n    z-index: 99999998;\n}\n#videoplayer-sticky.mobile {    \n    left: 0;\n}\n#page-content {\n    position: relative;\t\t\t\t\n    max-width: 640px;\n    margin: 10px auto;\n}\n.video-container {\n    position: relative;\t\n    width: 500px;\n    right: 0;\n    bottom: 0;\n    height: 315px;\n}\n\n.video-element {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%\n}\n\n#ad-container {\n    position: absolute;\n    top: 35px;\n    left: 0;    \n    width: 100%;   \n    z-index: 999999999; \n}\nbutton {    \n    left: 20px;\n    bottom: 20px;\n    height: 40px;\n    width: 100px;\n    border-style: none;\n    font-weight: bold;\n    font-size: 25px;\n    opacity: 0.5;\n    background-color: #fff;\n    border-radius: 5px;\n    border: 1px transparent solid;\n    color: #000;\n    cursor: pointer;\n    line-height: 0;\n    z-index: 999999;\n    position: absolute;\n    left: 10px;\n    bottom: 30px;\n}\n#close-element {\n    position: absolute;\n    left: 3px!important;\n    top: -5px;\n    width: 45px;\n    height: 20px;\n    background: #333;\n    color: #fff;\n    font-size: 10px;\n    opacity: 1;\n    padding: 5px;\n}\n\n.mobile {\n    width: 90%!important;\n    height: 162px!important;\n    left: 0;\n}\n.mobile button {\n    width: 75px;\n    font-size: 14px;\n    height: 24px;\n    margin-bottom: 10px;\n    left: 8px;\n    bottom: 0px;\n}\n\n\n","",{version:3,sources:["webpack://./playerVast/module/video/css/player.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,eAAe;IACf,SAAS;IACT,UAAU;IACV,YAAY;IACZ,iBAAiB;AACrB;AACA;IACI,OAAO;AACX;AACA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,iBAAiB;AACrB;AACA;IACI,kBAAkB;IAClB,YAAY;IACZ,QAAQ;IACR,SAAS;IACT,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,MAAM;IACN,OAAO;IACP,WAAW;IACX;AACJ;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,OAAO;IACP,WAAW;IACX,kBAAkB;AACtB;AACA;IACI,UAAU;IACV,YAAY;IACZ,YAAY;IACZ,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;IACf,YAAY;IACZ,sBAAsB;IACtB,kBAAkB;IAClB,6BAA6B;IAC7B,WAAW;IACX,eAAe;IACf,cAAc;IACd,eAAe;IACf,kBAAkB;IAClB,UAAU;IACV,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,SAAS;IACT,WAAW;IACX,YAAY;IACZ,gBAAgB;IAChB,WAAW;IACX,eAAe;IACf,UAAU;IACV,YAAY;AAChB;;AAEA;IACI,oBAAoB;IACpB,uBAAuB;IACvB,OAAO;AACX;AACA;IACI,WAAW;IACX,eAAe;IACf,YAAY;IACZ,mBAAmB;IACnB,SAAS;IACT,WAAW;AACf",sourcesContent:["#videoplayer-sticky {        \n    height: 300px;\n    position: fixed;\n    bottom: 0;\n    right: 5px;\n    width: 500px;\n    z-index: 99999998;\n}\n#videoplayer-sticky.mobile {    \n    left: 0;\n}\n#page-content {\n    position: relative;\t\t\t\t\n    max-width: 640px;\n    margin: 10px auto;\n}\n.video-container {\n    position: relative;\t\n    width: 500px;\n    right: 0;\n    bottom: 0;\n    height: 315px;\n}\n\n.video-element {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%\n}\n\n#ad-container {\n    position: absolute;\n    top: 35px;\n    left: 0;    \n    width: 100%;   \n    z-index: 999999999; \n}\nbutton {    \n    left: 20px;\n    bottom: 20px;\n    height: 40px;\n    width: 100px;\n    border-style: none;\n    font-weight: bold;\n    font-size: 25px;\n    opacity: 0.5;\n    background-color: #fff;\n    border-radius: 5px;\n    border: 1px transparent solid;\n    color: #000;\n    cursor: pointer;\n    line-height: 0;\n    z-index: 999999;\n    position: absolute;\n    left: 10px;\n    bottom: 30px;\n}\n#close-element {\n    position: absolute;\n    left: 3px!important;\n    top: -5px;\n    width: 45px;\n    height: 20px;\n    background: #333;\n    color: #fff;\n    font-size: 10px;\n    opacity: 1;\n    padding: 5px;\n}\n\n.mobile {\n    width: 90%!important;\n    height: 162px!important;\n    left: 0;\n}\n.mobile button {\n    width: 75px;\n    font-size: 14px;\n    height: 24px;\n    margin-bottom: 10px;\n    left: 8px;\n    bottom: 0px;\n}\n\n\n"],sourceRoot:""}]),e.Z=a},645:function(t){t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i="",n=void 0!==e[5];return e[4]&&(i+="@supports (".concat(e[4],") {")),e[2]&&(i+="@media ".concat(e[2]," {")),n&&(i+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),i+=t(e),n&&(i+="}"),e[2]&&(i+="}"),e[4]&&(i+="}"),i})).join("")},e.i=function(t,i,n,o,s){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var r=0;r<this.length;r++){var d=this[r][0];null!=d&&(a[d]=!0)}for(var l=0;l<t.length;l++){var h=[].concat(t[l]);n&&a[h[0]]||(void 0!==s&&(void 0===h[5]||(h[1]="@layer".concat(h[5].length>0?" ".concat(h[5]):""," {").concat(h[1],"}")),h[5]=s),i&&(h[2]?(h[1]="@media ".concat(h[2]," {").concat(h[1],"}"),h[2]=i):h[2]=i),o&&(h[4]?(h[1]="@supports (".concat(h[4],") {").concat(h[1],"}"),h[4]=o):h[4]="".concat(o)),e.push(h))}},e}},537:function(t){t.exports=function(t){var e=t[1],i=t[3];if(!i)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),s="/*# ".concat(o," */"),a=i.sources.map((function(t){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([s]).join("\n")}return[e].join("\n")}},379:function(t){var e=[];function i(t){for(var i=-1,n=0;n<e.length;n++)if(e[n].identifier===t){i=n;break}return i}function n(t,n){for(var s={},a=[],r=0;r<t.length;r++){var d=t[r],l=n.base?d[0]+n.base:d[0],h=s[l]||0,c="".concat(l," ").concat(h);s[l]=h+1;var p=i(c),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var g=o(u,n);n.byIndex=r,e.splice(r,0,{identifier:c,updater:g,references:1})}a.push(c)}return a}function o(t,e){var i=e.domAPI(e);return i.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;i.update(t=e)}else i.remove()}}t.exports=function(t,o){var s=n(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<s.length;a++){var r=i(s[a]);e[r].references--}for(var d=n(t,o),l=0;l<s.length;l++){var h=i(s[l]);0===e[h].references&&(e[h].updater(),e.splice(h,1))}s=d}}},569:function(t){var e={};t.exports=function(t,i){var n=function(t){if(void 0===e[t]){var i=document.querySelector(t);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(i)}},216:function(t){t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:function(t,e,i){t.exports=function(t){var e=i.nc;e&&t.setAttribute("nonce",e)}},795:function(t){t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(i){!function(t,e,i){var n="";i.supports&&(n+="@supports (".concat(i.supports,") {")),i.media&&(n+="@media ".concat(i.media," {"));var o=void 0!==i.layer;o&&(n+="@layer".concat(i.layer.length>0?" ".concat(i.layer):""," {")),n+=i.css,o&&(n+="}"),i.media&&(n+="}"),i.supports&&(n+="}");var s=i.sourceMap;s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,i)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:function(t){t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var s=e[n]={id:n,exports:{}};return t[n](s,s.exports,i),s.exports}i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,{a:e}),e},i.d=function(t,e){for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.nc=void 0,function(){var t=i(379),e=i.n(t),n=i(795),o=i.n(n),s=i(569),a=i.n(s),r=i(565),d=i.n(r),l=i(216),h=i.n(l),c=i(589),p=i.n(c),u=i(997),g={};g.styleTagTransform=p(),g.setAttributes=d(),g.insert=a().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=h(),e()(u.Z,g),u.Z&&u.Z.locals&&u.Z.locals;var m,A=function(){function t(t,e,i){this.debug=t,this.prefix=e,this.level=i,this.overrideParameters()}return t.prototype.overrideParameters=function(){var t,e,i,n,o,s=new URLSearchParams(window.location.search);null!=s.get("levelLog")&&(this.level.logLevel.info=null!==(t=s.get("levelLog").includes("info"))&&void 0!==t?t:null,this.level.logLevel.log=null!==(e=s.get("levelLog").includes("log"))&&void 0!==e?e:null,this.level.logLevel.error=null!==(i=s.get("levelLog").includes("error"))&&void 0!==i?i:null,this.level.logLevel.warning=null!==(n=s.get("levelLog").includes("warning"))&&void 0!==n?n:null,this.level.logLevel.table=null!==(o=s.get("levelLog").includes("table"))&&void 0!==o?o:null)},t.prototype.TVGLog=function(t,e,i){void 0===i&&(i=!1),this.debug&&(i?console.log("%c TVGLog "+t+" "+e,"background: #ff7f50; color: #000"):console.log("%c TVGLog "+t+" "+e,"background: #ffff00; color: #000"))},t.prototype.info=function(t){if(!1===this.debug)return null;this.level.logLevel.info&&console.info("".concat(this.prefix,": ").concat(t))},t.prototype.log=function(t){if(!1===this.debug)return null;this.level.logLevel.log&&console.log("".concat(this.prefix,": ").concat(t))},t.prototype.error=function(t){if(!1===this.debug)return null;this.level.logLevel.error&&console.error("".concat(this.prefix,": ").concat(t))},t.prototype.warning=function(t){if(!1===this.debug)return null;this.level.logLevel.warning&&console.warn("".concat(this.prefix,": ").concat(t))},t.prototype.table=function(t){if(!1===this.debug)return null;this.level.logLevel.table&&console.table(t)},t}(),f=function(){function t(t){this.domain=t}return t.prototype.getSetting=function(){var t=null;switch(this.domain){case"192.168.1.74":case"tricchetto.homepc.it":case"www.italynews.org.uk":t=this.italyNewsSetting()}return t},t.prototype.defaultSetting=function(){return{vastConfig:[{placement:{name:"videoplayer-sticky",id:214,type:"sticky",width:360,autoplay:!1,urlDesktop:"https://storage.googleapis.com/gvabox/media/samples/stock.mp4",urlTablet:"https://storage.googleapis.com/gvabox/media/samples/stock.mp4",urlMobile:"https://storage.googleapis.com/gvabox/media/samples/stock.mp4",wSize:640,hSize:360},config:[{nameProvider:"DoubleClick",vastUrl:"https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/single_ad_samples&sz=640x480&cust_params=sample_ct%3Dlinear&ciu_szs=300x250%2C728x90&gdfp_req=1&output=vast&unviewed_position_start=1&env=vp&impl=s&correlator="},{nameProvider:"Viralize",vastUrl:"https://pubads.g.doubleclick.net/gampad/ads?iu=/21775744923/external/single_ad_samples&sz=640x480&cust_params=sample_ct%3Dredirectlinear&ciu_szs=300x250%2C728x90&gdfp_req=1&output=vast&unviewed_position_start=1&env=vp&impl=s&correlator="}]}]}},t.prototype.italyNewsSetting=function(){return{vastConfig:[{placement:{name:"videoplayer-sticky",id:214,type:"sticky",width:360,autoplay:!1,urlDesktop:"https://storage.googleapis.com/gvabox/media/samples/stock.mp4",urlTablet:"https://storage.googleapis.com/gvabox/media/samples/stock.mp4",urlMobile:"https://storage.googleapis.com/gvabox/media/samples/stock.mp4",wSize:640,hSize:360},config:[{nameProvider:"AdPlus",vastUrl:"https://pubads.g.doubleclick.net/gampad/ads?iu=/21849154601,22820207193/Ad.Plus-InPage-Video&description_url=[description_url]&env=vp&impl=s&correlator=[rnd]&tfcd=0&npa=0&gdfp_req=1&vpa=0&vpmute=1&output=vast&sz=400x300%7C640x480%7C1x1&unviewed_position_start=1"},{nameProvider:"Viralize",vastUrl:"https://ads.viralize.tv/vast/?zid=AAEjfC_It3dDj47g&u=[description_url]&cs=[consent]"}]}]}},t}(),v=function(){function t(t){this.domain=t}return t.prototype.getSetting=function(){var t=null;switch(this.domain){case"192.168.1.74":case"tricchetto.homepc.it":case"www.italynews.org.uk":t=this.italyNewsSetting()}return t},t.prototype.italyNewsSetting=function(){return{sources:{mp4:"https://storage.googleapis.com/interactive-media-ads/media/android.mp4",webm:"https://storage.googleapis.com/interactive-media-ads/media/android.webm"},config:{delayButtonClose:5e3}}},t}(),y=function(){function t(t){this.domain=t}return t.prototype.getSetting=function(){var t=null;switch(this.domain){case"192.168.1.74":case"tricchetto.homepc.it":case"www.italynews.org.uk":t=this.italyNewsSetting()}return t},t.prototype.italyNewsSetting=function(){return{logLevel:{info:!0,log:!0,error:!0,warning:!0,table:!0}}},t}(),w=function(){function t(){this.amp=!1,this.version="1";var t=this.getDomainSetting("log");this.maLog=new A(!0,"MAGELLANO SETTING",t),this.init()}return t.getDomain=function(){return window.location.host},t.prototype.init=function(){this.maLog.TVGLog("TGVLibrary",this.version),void 0===window.__MA_SETTING_INIT&&(window._tgvtag?(this.clientId=_tgvtag.clientId,this.domainApi=_tgvtag.domainApi,this.site=_tgvtag.site,_tgvtag.referrer&&(this.referrer=_tgvtag.site),_tgvtag.amp&&(this.amp=_tgvtag.amp),this.maLog.TVGLog("clientID",this.clientId),this.maLog.TVGLog("domainApi",this.domainApi),this.maLog.TVGLog("site",this.site),window.__MA_SETTING_INIT=!0):this.maLog.TVGLog("TGV - Init:","_tgvtag is null"))},t.prototype.getDomainSetting=function(e){var i;switch(e){case"ima":if(void 0===window.__MA_SETTING_IMA__){var n=new f(t.getDomain());this.setting=n.getSetting(),window.__MA_SETTING_IMA__=this.setting}i=window.__MA_SETTING_IMA__;break;case"player":if(void 0===window.__MA_SETTING_PLAYER__){var o=new v(t.getDomain());this.setting=o.getSetting(),window.__MA_SETTING_PLAYER__=this.setting}i=window.__MA_SETTING_PLAYER__;break;case"log":if(void 0===window.__MA_SETTING_LOG__){var s=new y(t.getDomain());this.setting=s.getSetting(),window.__MA_SETTING_LOG__=this.setting}i=window.__MA_SETTING_LOG__}return i},t}(),b=function(t){void 0===t&&(t=!1),this.touch=!1,this.inViewPassed=!1,this.isTouchDevice=function(){return!(!("ontouchstart"in window)&&!navigator.maxTouchPoints)},this.isScrolledIntoView=function(t,e){return window.scrollY,window.innerHeight,t.offsetTop,t.offsetHeight,!0},this.isScrolledIntoViewTop=function(t){var e=window.scrollY,i=(window.innerHeight,t.offsetTop);return t.outerHeight,i>=e-0},this.getMobileOs=function(){var t,e=navigator.userAgent,i={device:"",userOs:"",userOsVer:"",userOsMajor:0};if(e.match(/iPad/i)?(i.device="iPad",i.userOs="iOS",t=e.indexOf("OS ")):e.match(/iPhone/i)?(i.device="iPhone",i.userOs="iOS",t=e.indexOf("OS ")):e.match(/Android/i)?(i.userOs="Android",t=e.indexOf("Android ")):i.userOs="","iOS"===i.userOs&&t>-1){var n=e.substring(t+3);-1!==n.indexOf(" ")&&(i.userOsVer=n.substring(0,n.indexOf(" ")).replace(/_/g,"."),i.userOsMajor=parseInt(i.userOsVer))}else"Android"===i.userOs&&t>-1?i.userOsVer=e.substring(t+8,3):i.userOsVer="";return i},this.isMobile=function(){var t,e=!1;return t=navigator.userAgent||navigator.vendor,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0),e},this.getBrowserVersion=function(){var t,e,i=navigator.userAgent,n={browserName:"",fullVersion:"",majorVersion:0,userOsMajor:0};try{n.browserName=navigator.appName,-1!=(t=i.indexOf("OPR/"))?(n.browserName="Opera",n.fullVersion=i.substring(t+4)):-1!=(t=i.indexOf("Opera"))?(n.browserName="Opera",n.fullVersion=i.substring(t+6),-1!=(t=i.indexOf("Version"))&&(n.fullVersion=i.substring(t+8))):-1!=(t=i.indexOf("MSIE"))?(n.browserName="Microsoft Internet Explorer",n.fullVersion=i.substring(t+5)):-1!=(t=i.indexOf("Chrome"))?(n.browserName="Google Chrome",n.fullVersion=i.substring(t+7)):-1!=(t=i.indexOf("Safari"))?(n.browserName="Safari",n.fullVersion=i.substring(t+7),-1!=(t=i.indexOf("Version"))&&(n.fullVersion=i.substring(t+8))):-1!=(t=i.indexOf("Firefox"))?(n.browserName="Mozilla Firefox",n.fullVersion=i.substring(t+8)):(e=i.lastIndexOf(" ")+1)<(t=i.lastIndexOf("/"))&&(n.browserName=i.substring(e,t),n.fullVersion=i.substring(t+1),n.browserName.toLowerCase()==n.browserName.toUpperCase()&&(n.browserName=navigator.appName)),-1!=(e=n.fullVersion.indexOf(";"))&&(n.fullVersion=n.fullVersion.substring(0,e)),-1!=(e=n.fullVersion.indexOf(" "))&&(n.fullVersion=n.fullVersion.substring(0,e)),n.majorVersion=parseInt(""+n.fullVersion,10),isNaN(n.majorVersion)&&(n.fullVersion=""+parseFloat(navigator.appVersion),n.majorVersion=parseInt(navigator.appVersion,10))}catch(t){}return n},this.maSetting=new w,this.logSetting=this.maSetting.getDomainSetting("log"),this.maLog=new A(!0,"MAGELLANO PLAYER",this.logSetting),!0===t&&(this.touch=this.isTouchDevice(),this.mobileOS=this.getMobileOs(),this.browserVersion=this.getBrowserVersion(),this.mobile=this.isMobile())},C=function(){function t(t,e,i,n,o,s,a){this.placementContainer=t,this.id=e,this.className=i,this.width=n,this.height=o,this.autoplay=s,this.isPlaying=!1,this.onVideoEnded=function(){};try{this.maSetting=new w,this.playerSetting=this.maSetting.getDomainSetting("player"),this.logSetting=this.maSetting.getDomainSetting("log"),this.maLog=new A(!0,"MAGELLANO PLAYER",this.logSetting),this.maBrowser=new b(!0),this.sourceElements=this.playerSetting.sources,null!=a&&(this.sourceElements=a)}catch(t){console.log("error try catch")}}return t.prototype.init=function(){this.detectDevice(),this.createVideoContainer(),this.createVideoElement(),this.createSourceElement(),this.createButtonPlay(),this.addCloseButton(),this.placementContainer.appendChild(this.videoContainer)},t.prototype.detectDevice=function(){this.typeDevice=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)?"mobile":"desktop"},t.prototype.createVideoContainer=function(){this.videoContainer=document.createElement("div"),this.videoContainer.id="video-container_".concat(this.id),this.videoContainer.className="video-container ".concat(this.className),"mobile"==this.typeDevice&&(this.videoContainer.classList.add("mobile"),this.placementContainer.classList.add("mobile"))},t.prototype.createVideoElement=function(){var t,e=this;this.videoElement=document.createElement("video"),this.videoElement.id="video-element_".concat(this.id),this.videoElement.className="video-element ".concat(this.className),this.videoElement.autoplay=this.autoplay,this.videoElement.setAttribute("playsinline",""),null===(t=this.videoElement)||void 0===t||t.addEventListener("play",(function(){e.maLog.info("createVideoElement")})),this.videoElement.addEventListener("ended",(function(){})),this.videoContainer.appendChild(this.videoElement)},t.prototype.createSourceElement=function(){for(var t=0,e=Object.entries(this.sourceElements);t<e.length;t++){var i=e[t],n=(i[0],i[1]),o=document.createElement("source");o.src=n,this.videoElement.appendChild(o)}},t.prototype.createButtonPlay=function(){var t,e=this;this.buttonPlay=document.createElement("button"),this.buttonPlay.innerText="Play",null===(t=this.buttonPlay)||void 0===t||t.addEventListener("click",(function(){e.videoElement.play()})),this.videoContainer.appendChild(this.buttonPlay)},t.prototype.addCloseButton=function(){var t,e=this,i=this;this.buttonClose=document.createElement("button"),this.buttonClose.id="close-element",this.buttonClose.innerText="Chiudi",null===(t=this.buttonClose)||void 0===t||t.addEventListener("click",(function(){i.remove()})),(5e3,new Promise((function(t){return setTimeout(t,5e3)}))).then((function(){e.videoContainer.appendChild(e.buttonClose)}))},t.prototype.onContentPauseRequested=function(){},t.prototype.onContentResumeRequested=function(){this.videoElement.play()},t.prototype.play=function(){this.videoElement.play(),this.buttonPlay.style.display="none"},t.prototype.hide=function(){this.videoContainer.style.visibility="hidden"},t.prototype.show=function(){this.videoContainer.style.visibility="visible"},t.prototype.setStatePlaying=function(t){switch(t.type){case"pause":default:this.isPlaying=!1;break;case"playing":this.isPlaying=!0}},t.prototype.remove=function(){this.videoContainer.remove()},t.prototype.getVideoContainer=function(){return this.videoContainer},t.prototype.getVideoElement=function(){return this.videoElement},t}(),S=function(){function t(t,e,i){this.currentIndexVast=0,this.actionEnabled=!0,this.onContentPauseRequested=function(t){this.maLog.TVGLog(this.id+" onContentPauseRequested "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type),this.videoElement.pause()},this.onContentResumeRequested=function(t){this.maLog.TVGLog(this.id+" onContentResumeRequested "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type),this.currentIndexVast+=1,this.currentIndexVast<=this.imaSettingConfigVasts.length-1?(this.maLog.log(this.id+" onAdLog","Try to update"),this.adsRequest=new google.ima.AdsRequest,this.adsRequest.adTagUrl=this.imaSettingConfigVasts[this.currentIndexVast].vastUrl,this.adsRequest.setAdWillAutoPlay(!0),this.adsRequest.setAdWillPlayMuted(!0),this.adsRequest.linearAdSlotWidth=640,this.adsRequest.linearAdSlotHeight=480,this.adsRequest.nonLinearAdSlotWidth=this.width,this.adsRequest.nonLinearAdSlotHeight=this.height,this.timeRequestAdsStart=performance.now(),this.adsLoader.requestAds(this.adsRequest)):this.isAdsTimeRequest&&t.getAd().isLinear()||(this.videoContainer.remove(),this.videoElement.src=this.imaSettingPlacement.urlDesktop,this.videoElement.load(),this.videoElement.pause())},this.currentVastLog=function(){this.maLog.TVGLog(this.id+" - Provider",this.imaSettingConfigVasts[this.currentIndexVast].nameProvider),this.maLog.TVGLog(this.id+" - vastUrl",this.imaSettingConfigVasts[this.currentIndexVast].vastUrl)},this.onAdStarted=function(t){this.player.show(),this.maLog.TVGLog(this.id+" onAdStarted "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type),this.timeRequestAdsEnd=performance.now(),this.maLog.TVGLog(this.id+" onAdStarted "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider+" - Time:",this.timeRequestAdsEnd-this.timeRequestAdsStart+" milliseconds"),this.isAdsTimeRequest=!0,this.isAdsPlayingState="start";var e=this.getPlayerDimension();switch(this.type){case"sticky":"start"==t.type&&this.videoContainer.style.opacity&&(this.videoContainer.style.opacity=1,this.player.buttonClose.click({p:this.placement},(function(t){t.data.p.remove()})));break;case"outstream":"start"==t.type&&(this.videoContainer.slideDown("slow"),this.player.maBrowser.isScrolledIntoView(this.videoContainer,e)||(this.isAdsTimeRequest=!0,this.isAdsPlayingState="pause",this.adsManager.pause()));break;case"in-read":"start"==t.type&&(this.player.maBrowser.isScrolledIntoView(this.videoContainer,e)||(this.isAdsTimeRequest=!0,this.isAdsPlayingState="pause",this.adsManager.pause()));break;case"in-read-float":case"in-read-fixed-top":break;default:this.maLog.TVGLog("onAdEvent","No type defined!")}t.getAd().isLinear()||(this.videoElement.load(),this.player.play(),this.isAdsTimeRequest=!1,this.isAdsPlayingState="pause")},this.onAdPaused=function(t){this.maLog.TVGLog(this.id+" onAdPaused "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type),this.isAdsTimeRequest=!0,this.isAdsPlayingState="pause"},this.onAdUserClose=function(t){this.maLog.TVGLog(this.id+" onAdUserClose "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type),!this.isAdsTimeRequest||t.getAd().isLinear(),this.videoContainer.remove(),this.playerVideo.src=this.imaSettingPlacement.urlDesktop,this.videoElement.load(),this.videoElement.pause()},this.onAdResumed=function(t){this.maLog.TVGLog(this.id+" onAdResumed "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type),this.isAdsTimeRequest=!0,this.isAdsPlayingState="start"},this.onAdImpression=function(t){this.maLog.TVGLog(this.id+" onAdImpression "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type)},this.onAdAllAdsCompleted=function(t){this.maLog.TVGLog(this.id+" onAdAllAdsCompleted "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type),this.isAdsTimeRequest=!1},this.onAdCompleted=function(t){switch(this.maLog.TVGLog(this.id+" onAdCompleted "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type),this.isAdsTimeRequest=!1,this.type){case"sticky":case"in-read":case"in-read-float":case"in-read-fixed-top":break;case"outstream":this.playerVideo.src="",this.adsManager&&this.adsManager.destroy(),window.removeEventListener("scroll",this._outstreamOnViewPort);break;default:this.taglibrary.log("onAdEvent","No type defined!")}},this.onAdSkipped=function(t){this.maLog.TVGLog(this.id+" onAdSkipped "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type),!this.isAdsTimeRequest||t.getAd().isLinear(),this.adContainer.remove(),this.videoElement.src=this.imaSettingPlacement.urlDesktop,this.videoElement.load(),this.player.play()},this.onVideoEnded=function(){switch(this.maLog.TVGLog(this.id+" onVideoEnded","Video End"),this.type){case"sticky":break;case"in-read":case"in-read-float":case"in-read-fixed-top":this.adContainer.remove(),this.videoElement.src=this.imaSettingPlacement.urlDesktop,this.videoElement.load(),this.videoElement.pause();break;case"outstream":this.player.placementContainer.remove();break;default:this.taglibrary.log("createPlayerVideo","No type defined!")}},this.prepareVastUrl=function(t){var e="";return this.maSetting.amp?(e=t.replace("[url]",encodeURIComponent(this.maSetting.referrer)),e=(e=(e=(e=(e=t.replace("[timestamp]",String((new Date).getTime()))).replace("[description_url]",encodeURIComponent(this.maSetting.referrer))).replace("[rnd]",String(Math.floor(1e7*Math.random())+1))).replace("[domain]",encodeURIComponent(this.maSetting.site))).replace("[referrer]",encodeURIComponent(this.maSetting.site))):(e=t.replace("[url]",encodeURIComponent(window.location.href)),e=(e=(e=(e=(e=t.replace("[timestamp]",String((new Date).getTime()))).replace("[description_url]",encodeURIComponent(window.location.href))).replace("[rnd]",String(Math.floor(1e7*Math.random())+1))).replace("[domain]",encodeURIComponent(window.location.hostname))).replace("[referrer]",encodeURIComponent(document.referrer))),e},this.playOnViewPort=function(){var t=this.player.maBrowser.isScrolledIntoView(this.videoContainer);this.maLog.TVGLog("playOnViewPort",t),!0!==t||this.inViewPassed||(this.videoElement.pause(),this.inViewPassed=!0,"pause"==this.isAdsPlayingState&&(this.isAdsPlayingState="start",this.adsManager.resume()),window.removeEventListener("scroll",this._playOnViewPort),this._outstreamOnViewPort=this.outstreamOnViewPort.bind(this),window.addEventListener("scroll",this._outstreamOnViewPort,!1))},this.imaSettingPlacement=t,this.imaSettingConfigVasts=e,this.maSetting=new w,this.logSetting=this.maSetting.getDomainSetting("log"),this.imaSetting=this.maSetting.getDomainSetting("ima"),this.maLog=new A(!0,"MAGELLANO PLAYER",this.logSetting),this.maBrowser=new b(!0),this.placement=t.name,this.id=t.id,this.type=t.type,this.width=t.width,this.player=i,this.player.hide(),this.videoElement=this.player.getVideoElement(),this.videoContainer=this.player.getVideoContainer(),this.createAdContainer()}return t.prototype.createAdContainer=function(){this.adContainer=document.createElement("div"),this.adContainer.id="ad-container",this.videoContainer.appendChild(this.adContainer),this.adDisplayContainer=new google.ima.AdDisplayContainer(this.adContainer,this.videoElement),this.adsLoader=new google.ima.AdsLoader(this.adDisplayContainer),this.initializeIMA()},t.prototype.initializeIMA=function(){var t,e=this;this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,(function(t){e.onAdsManagerLoaded(t)}),!1),this.videoElement.addEventListener("ended",(function(){e.adsLoader.contentComplete(),e.onVideoEnded()})),this.adsRequest=new google.ima.AdsRequest,this.adsRequest.adTagUrl=this.imaSettingConfigVasts[this.currentIndexVast].vastUrl,this.adsRequest.linearAdSlotWidth=this.videoElement.clientWidth,this.adsRequest.linearAdSlotHeight=this.videoElement.clientHeight,this.adsRequest.nonLinearAdSlotWidth=this.videoElement.clientWidth,this.adsRequest.nonLinearAdSlotHeight=this.videoElement.clientHeight/3,this.adsRequest.setAdWillAutoPlay(!0),this.adsRequest.setAdWillPlayMuted(!0),this.adsLoader.getSettings().setNumRedirects(6),this.adsLoader.getSettings().setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED),this.adsLoader.getSettings().setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.INSECURE),google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED),google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.INSECURE),null===(t=this.player.buttonPlay)||void 0===t||t.addEventListener("click",(function(){})),e.adsLoader.requestAds(e.adsRequest),this.videoElement.addEventListener("play",(function(t){e.player.onContentPauseRequested()})),this.listenersTupePosition()},t.prototype.onAdsManagerLoaded=function(t){var e=new google.ima.AdsRenderingSettings;e.enablePreloading=!0,e.loadVideoTimeout=3e4,e.restoreCustomPlaybackStateOnAdBreakComplete=!0,this.adsManager=t.getAdsManager(this.videoElement),this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,this.onContentPauseRequested.bind(this)),this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED,this.onContentResumeRequested.bind(this)),this.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED,this.onAdLoaded.bind(this)),this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED,this.onAdStarted.bind(this)),this.adsManager.addEventListener(google.ima.AdEvent.Type.PAUSED,this.onAdPaused.bind(this)),this.adsManager.addEventListener(google.ima.AdEvent.Type.USER_CLOSE,this.onAdUserClose.bind(this)),this.adsManager.addEventListener(google.ima.AdEvent.Type.RESUMED,this.onAdResumed.bind(this)),this.adsManager.addEventListener(google.ima.AdEvent.Type.IMPRESSION,this.onAdImpression.bind(this)),this.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED,this.onAdAllAdsCompleted.bind(this)),this.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE,this.onAdCompleted.bind(this)),this.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPED,this.onAdSkipped.bind(this)),this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR,this.onAdError.bind(this)),this.adDisplayContainer.initialize();var i=this.videoElement.clientWidth,n=this.videoElement.clientHeight;this.adsManager.init(i,n,google.ima.ViewMode.NORMAL),this.adsManager.start(),this.isAdsTimeRequest=!0},t.prototype.loadAds=function(t,e){if(!this.adsLoaded){this.adsLoaded=!0,t.preventDefault(),this.videoElement.load(),this.adDisplayContainer.initialize();var i=this.videoElement.clientWidth+100,n=this.videoElement.clientHeight+100;try{e.init(i,n,google.ima.ViewMode.NORMAL),e.start(),this.closeVideoOnEnd(e)}catch(t){console.log("AdsManager could not be started"),this.player.play()}}},t.prototype.closeVideoOnEnd=function(t){var e=this,i=setInterval((function(){Math.round(t.getRemainingTime())<1&&(clearInterval(i),e.videoContainer.remove())}),1e3)},t.prototype.onAdError=function(t){if(this.maLog.TVGLog(this.id+" onAdError "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider,t.type+" "+t.getError().getErrorCode()+" "+t.getError().getMessage(),!0),this.timeRequestAdsEnd=performance.now(),this.maLog.TVGLog(this.id+" onAdError "+this.imaSettingConfigVasts[this.currentIndexVast].nameProvider+" - Time:",this.timeRequestAdsEnd-this.timeRequestAdsStart+" milliseconds"),this.currentIndexVast+=1,this.currentIndexVast<=this.imaSettingConfigVasts.length-1)this.maLog.TVGLog(this.id+" onAdLog","Try to update"),this.currentVastLog(),this.adsRequest=new google.ima.AdsRequest,this.adsRequest.adTagUrl=this.prepareVastUrl(this.imaSettingConfigVasts[this.currentIndexVast].vastUrl),this.adsRequest.linearAdSlotWidth=640,this.adsRequest.linearAdSlotHeight=480,this.adsRequest.nonLinearAdSlotWidth=this.width,this.adsRequest.nonLinearAdSlotHeight=this.height,this.timeRequestAdsStart=performance.now(),this.adsRequest.setAdWillAutoPlay(!0),this.adsRequest.setAdWillPlayMuted(!0),this.adsLoader.requestAds(this.adsRequest);else switch(this.adsManager&&this.adsManager.destroy(),this.isAdsTimeRequest=!1,this.type){case"sticky":this.videoContainer.remove(),"function"==typeof window.OnEmptyVideoSticky?window.OnEmptyVideoSticky():this.maLog.TVGLog("OnEmptyVideoSticky","No Set");break;case"in-read":this.adContainer.remove(),this.videoElement.src=this.imaSettingPlacement.urlDesktop,this.videoElement.load(),this.videoElement.pause();break;case"in-read-float":case"in-read-fixed-top":case"outstream":break;default:this.maLog.TVGLog("createPlayerVideo","No type defined!")}},t.prototype.onAdLoaded=function(t){this.adsManager.setVolume(0),this.isAdsTimeRequest=!0,t.getAd().isLinear()||this.player.play(),t.type!=google.ima.AdEvent.Type.LOADED||t.getAd().isLinear()||this.maLog.TVGLog("onAdLoaded","Non Linear Ads")},t.prototype.adContainerClick=function(){console.log("ad container clicked"),this.videoElement.paused?this.videoElement.play():this.videoElement.pause()},t.prototype.getPlayerDimension=function(){var t=this.videoContainer.offsetWidth;this.width&&(t=this.width),this.maBrowser.isMobile()&&"sticky"==this.type&&(t=300),this.maBrowser.isMobile()||"sticky"!=this.type||(t=430),this.maLog.TVGLog(this.id+" getPlayerDimension - client_offsetWidth",String(t));var e=t*(this.imaSettingPlacement.hSize/this.imaSettingPlacement.wSize);return this.maLog.TVGLog(this.id+" getPlayerDimension - client_offsetHeight",String(e)),this.width=t,this.height=e,{width:this.width,height:this.height}},t.prototype.getFolatPlayerDimension=function(){var t;return this.width&&(t=360),this.maBrowser.isMobile()&&(t=250),{width:t,height:t*(this.imaSettingPlacement.hSize/this.imaSettingPlacement.wSize)}},t.prototype.listenersTupePosition=function(){this.videoElement.muted=!0,this.videoElement.pause();var t=this.getPlayerDimension();!0===this.imaSettingPlacement.autoplay&&("sticky"==this.imaSettingPlacement.type?(this.timeRequestAdsStart=performance.now(),this.adsLoader.requestAds(this.adsRequest)):("in-read-float"==this.imaSettingPlacement.type||"in-read-fixed-top"==this.imaSettingPlacement.type||(this.imaSettingPlacement.type,this.timeRequestAdsStart=performance.now(),this.adsLoader.requestAds(this.adsRequest)),this.player.maBrowser.isScrolledIntoView(this.videoContainer,t)?(this._outstreamOnViewPort=this.outstreamOnViewPort.bind(this),window.addEventListener("scroll",this._outstreamOnViewPort,!1)):(this._playOnViewPort=this.playOnViewPort.bind(this),window.addEventListener("scroll",this._playOnViewPort,!1))))},t.prototype.outstreamOnViewPort=function(){},t}(),E=(m=function(t,e){return m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},m(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}m(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),L=function(t){function e(e,i,n){return t.call(this,e,i,n)||this}return E(e,t),e}(S),V=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),x=function(t){function e(e,i,n){return t.call(this,e,i,n)||this}return V(e,t),e}(S),I=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),_=function(t){function e(e,i,n){var o=t.call(this,document.body.querySelector("#".concat(e.name)),e.id,e.type,e.wSize,e.hSize,e.autoplay,n)||this,s=o;switch(s.init(),e.type){case"sticky":new L(e,i,s);break;case"in-read":new x(e,i,s)}return o}return I(e,t),e.create=function(){var t=(new w).getDomainSetting("ima"),i=document.createElement("script");i.src="//imasdk.googleapis.com/js/sdkloader/ima3.js",i.onload=function(){t.vastConfig.forEach((function(t){new e(t.placement,t.config).getVideoContainer()}))},document.head.appendChild(i),e.handlerPlayerTgv()},e.handlerPlayerTgv=function(){var t=(new w).getDomainSetting("log"),i=new A(!0,"MAGELLANO PLAYER VAST",t);i.log("handlerPlayerTgv init"),_tgvtag.push=function(){try{var t=new f(w.getDomain()),n=t.defaultSetting(),o=n.vastConfig[0].placement,s=n.vastConfig[0].config;o.name=arguments[0].placement,o.id=arguments[0].id,o.type=arguments[0].type,o.width=arguments[0].width,console.info(o);var a=new e(o,s);a.getVideoContainer()}catch(t){i.error("Errore chiamata handlerPlayerTgv")}}},e}(C);_.create()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,